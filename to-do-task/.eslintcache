[{"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\index.js":"1","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\App.js":"2","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\reportWebVitals.js":"3","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\pages\\home\\Home.js":"4","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\layout\\Layout.js":"5","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\to-do-container\\ToDoContainer.js":"6","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\add-task-form\\AddTaskForm.js":"7","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\hooks\\useAsync.js":"8","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\hooks\\use-form.js":"9","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\to-do-card\\ToDoCard.js":"10","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\add-task-form\\AddTaskFormik.js":"11","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\charts\\BarChart.js":"12","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\charts\\PieChart.js":"13"},{"size":636,"mtime":1610346485441,"results":"14","hashOfConfig":"15"},{"size":958,"mtime":1610458884701,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1610346486052,"results":"17","hashOfConfig":"15"},{"size":8052,"mtime":1610459049167,"results":"18","hashOfConfig":"15"},{"size":1168,"mtime":1610459432242,"results":"19","hashOfConfig":"15"},{"size":1698,"mtime":1610346487876,"results":"20","hashOfConfig":"15"},{"size":2810,"mtime":1610356142677,"results":"21","hashOfConfig":"15"},{"size":2212,"mtime":1610444226547,"results":"22","hashOfConfig":"15"},{"size":3404,"mtime":1610351358300,"results":"23","hashOfConfig":"15"},{"size":930,"mtime":1610346487558,"results":"24","hashOfConfig":"15"},{"size":2753,"mtime":1610356269934,"results":"25","hashOfConfig":"15"},{"size":3375,"mtime":1610444553714,"results":"26","hashOfConfig":"15"},{"size":3119,"mtime":1610444670172,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"t7km4a",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\index.js",[],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\App.js",[],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\reportWebVitals.js",[],["57","58"],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\pages\\home\\Home.js",["59","60","61","62","63","64"],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\layout\\Layout.js",[],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\to-do-container\\ToDoContainer.js",[],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\add-task-form\\AddTaskForm.js",["65","66"],"import {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Select,\n  Text,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useForm } from \"../../hooks/use-form\";\n\nconst initialState = {\n  title: \"\",\n  severity: \"Normal\",\n  progress: \"to_do\",\n  date: new Date().toDateString(),\n  description: \"\",\n};\n\nexport default function AddTaskForm({\n  onSubmitt,\n  isSubmitting,\n  isSuccess,\n  currentState,\n  buttonName,\n}) {\n  const [todo, setTodo] = React.useState(currentState || initialState);\n\n  React.useEffect(() => {\n    isSuccess && setInitialState();\n  }, [isSuccess]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    handleSubmit();\n  };\n\n  const onChange = (e) => {\n    handleChange(e);\n  };\n\n  const onBlur = (e) => {\n    handleBlur(e);\n  };\n\n  const titleValidation = (title) => {\n    if (title.trim() === \"\") {\n      return \"Title is required\";\n    }\n    if (title.trim().length < 6 || title.trim().length > 10) {\n      return \"Title needs to be between six to ten characters\";\n    }\n    return null;\n  };\n\n  const descriptionValidation = (description) => {\n    if (description.trim() === \"\") {\n      return \"Description is required\";\n    }\n    if (description.trim().length < 8) {\n      return \"Description needs to be at least eight characters\";\n    }\n    return null;\n  };\n\n  const validationScheme = {\n    title: titleValidation,\n    description: descriptionValidation,\n  };\n\n  const {\n    values,\n    errors,\n    touched,\n    handleSubmit,\n    handleBlur,\n    handleChange,\n    setInitialState\n  } = useForm(todo, validationScheme, onSubmitt);\n\n  return (\n    <form onSubmit={onSubmit} autoComplete=\"off\">\n      <FormControl>\n        <FormLabel pt=\"10px\">Name</FormLabel>\n        <Input\n          value={values.title}\n          bg=\"gray.50\"\n          name=\"title\"\n          onChange={onChange}\n          onBlur={onBlur}\n          // isRequired\n        />\n        <Text color=\"red.500\">{touched.title && errors.title}</Text>\n      </FormControl>\n      <FormControl>\n        <FormLabel pt=\"10px\">Description</FormLabel>\n        <Input\n          value={values.description}\n          bg=\"gray.50\"\n          name=\"description\"\n          onChange={onChange}\n          onBlur={onBlur}\n          // isRequired\n        />\n        <Text color=\"red.500\">{touched.description && errors.description}</Text>\n      </FormControl>\n      <FormControl>\n        <FormLabel pt=\"10px\">Severity</FormLabel>\n        <Select\n          value={values.severity}\n          bg=\"gray.50\"\n          name=\"severity\"\n          onChange={onChange}\n        >\n          <option>Normal</option>\n          <option>Important</option>\n          <option>Urgent</option>\n        </Select>\n      </FormControl>\n\n      <Button type=\"submit\" disabled={isSubmitting}>\n        {buttonName}\n      </Button>\n    </form>\n  );\n}\n","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\hooks\\useAsync.js",[],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\hooks\\use-form.js",[],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\to-do-card\\ToDoCard.js",[],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\add-task-form\\AddTaskFormik.js",["67"],"import {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Select,\n  Text,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst initialState = {\n  title: \"\",\n  severity: \"Normal\",\n  progress: \"to_do\",\n  date: new Date().toDateString(),\n  description: \"\",\n};\n\nconst validationSchema = Yup.object().shape({\n  title: Yup.string()\n    .min(6, \"Too Short! Title needs to be between six to ten characters\")\n    .max(10, \"Too Long! Title needs to be between six to ten characters\")\n    .required(\"Title is required\"),\n  description: Yup.string()\n    .min(8, \"Too Short! Description needs to be at least eight characters\")\n    .max(50, \"Too Long!\")\n    .required(\"Description is required\"),\n});\n\nexport default function AddTaskFormik({\n  onSubmitt,\n  // isSubmitting,\n  isSuccess,\n  currentState,\n  buttonName,\n}) {\n  const [todo, setTodo] = React.useState(currentState || initialState);\n\n  return (\n    <Formik\n      initialValues={todo}\n      validationSchema={validationSchema}\n      onSubmit={(values, {resetForm, setSubmitting}) => {\n        onSubmitt(values);\n        setSubmitting(false);\n        resetForm();\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form autoComplete=\"off\">\n          <Field name=\"title\">\n            {({ field, form }) => (\n              <FormControl>\n                <FormLabel pt=\"10px\">Name</FormLabel>\n                <Input {...field} bg=\"gray.50\" name=\"title\" />\n                {form.errors.title && form.touched.title ? (\n                  <Text color=\"red.500\">{form.errors.title}</Text>\n                ) : null}\n              </FormControl>\n            )}\n          </Field>\n          <Field name=\"description\">\n            {({ field, form }) => (\n              <FormControl>\n                <FormLabel pt=\"10px\">Description</FormLabel>\n                <Input {...field} bg=\"gray.50\" name=\"description\" />\n                {form.errors.description && form.touched.description ? (\n                  <Text color=\"red.500\">{form.errors.description}</Text>\n                ) : null}\n              </FormControl>\n            )}\n          </Field>\n          <Field name=\"severity\">\n            {({ field, form }) => (\n              <FormControl>\n                <FormLabel pt=\"10px\">Severity</FormLabel>\n                <Select {...field} bg=\"gray.50\" name=\"severity\">\n                  <option>Normal</option>\n                  <option>Important</option>\n                  <option>Urgent</option>\n                </Select>\n              </FormControl>\n            )}\n          </Field>\n\n          <Button type=\"submit\" disabled={isSubmitting}>\n            {buttonName}\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\charts\\BarChart.js",["68","69"],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\charts\\PieChart.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":15,"column":8,"nodeType":"76","messageId":"77","endLine":15,"endColumn":19},{"ruleId":"74","severity":1,"message":"78","line":18,"column":10,"nodeType":"76","messageId":"77","endLine":18,"endColumn":24},{"ruleId":"74","severity":1,"message":"79","line":41,"column":32,"nodeType":"76","messageId":"77","endLine":41,"endColumn":42},{"ruleId":"74","severity":1,"message":"80","line":78,"column":43,"nodeType":"76","messageId":"77","endLine":78,"endColumn":56},{"ruleId":"74","severity":1,"message":"81","line":129,"column":33,"nodeType":"76","messageId":"77","endLine":129,"endColumn":44},{"ruleId":"82","severity":1,"message":"83","line":169,"column":6,"nodeType":"84","endLine":169,"endColumn":8,"suggestions":"85"},{"ruleId":"74","severity":1,"message":"86","line":27,"column":16,"nodeType":"76","messageId":"77","endLine":27,"endColumn":23},{"ruleId":"82","severity":1,"message":"87","line":31,"column":6,"nodeType":"84","endLine":31,"endColumn":17,"suggestions":"88"},{"ruleId":"74","severity":1,"message":"86","line":39,"column":16,"nodeType":"76","messageId":"77","endLine":39,"endColumn":23},{"ruleId":"89","severity":1,"message":"90","line":11,"column":21,"nodeType":"91","messageId":"92","endLine":11,"endColumn":23},{"ruleId":"89","severity":1,"message":"93","line":18,"column":24,"nodeType":"91","messageId":"92","endLine":18,"endColumn":26},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'AddTaskForm' is defined but never used.","Identifier","unusedVar","'useBetterAsync' is defined but never used.","'isFetching' is assigned a value but never used.","'mutationError' is assigned a value but never used.","'updateError' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.","ArrayExpression",["96"],"'setTodo' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'setInitialState'. Either include it or remove the dependency array.",["97"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.filter() expects a return value from arrow function.","no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [refetch]",{"range":"102","text":"103"},"Update the dependencies array to be: [isSuccess, setInitialState]",{"range":"104","text":"105"},[4460,4462],"[refetch]",[569,580],"[isSuccess, setInitialState]"]