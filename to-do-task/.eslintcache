[{"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\index.js":"1","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\App.js":"2","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\reportWebVitals.js":"3","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\pages\\home\\Home.js":"4","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\layout\\Layout.js":"5","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\to-do-container\\ToDoContainer.js":"6","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\add-task-form\\AddTaskForm.js":"7","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\hooks\\useAsync.js":"8","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\hooks\\use-form.js":"9","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\to-do-card\\ToDoCard.js":"10","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\add-task-form\\AddTaskFormik.js":"11","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\charts\\BarChart.js":"12","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\charts\\PieChart.js":"13","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\hooks\\todos-context.js":"14"},{"size":849,"mtime":1610631930852,"results":"15","hashOfConfig":"16"},{"size":1170,"mtime":1610967348000,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1610346486052,"results":"18","hashOfConfig":"16"},{"size":5583,"mtime":1610967330324,"results":"19","hashOfConfig":"16"},{"size":939,"mtime":1610612887340,"results":"20","hashOfConfig":"16"},{"size":1698,"mtime":1610346487876,"results":"21","hashOfConfig":"16"},{"size":2810,"mtime":1610356142677,"results":"22","hashOfConfig":"16"},{"size":2212,"mtime":1610444226547,"results":"23","hashOfConfig":"16"},{"size":3404,"mtime":1610351358300,"results":"24","hashOfConfig":"16"},{"size":930,"mtime":1610346487558,"results":"25","hashOfConfig":"16"},{"size":2753,"mtime":1610356269934,"results":"26","hashOfConfig":"16"},{"size":3475,"mtime":1610967347826,"results":"27","hashOfConfig":"16"},{"size":3246,"mtime":1610967347826,"results":"28","hashOfConfig":"16"},{"size":706,"mtime":1610967317671,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"t7km4a",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\index.js",[],["63","64"],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\App.js",["65"],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\reportWebVitals.js",[],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\pages\\home\\Home.js",["66","67","68","69","70"],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\layout\\Layout.js",["71"],"import { Flex, ListItem, UnorderedList, Link, Button } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport \"./style.css\";\nimport { Link as ReactLink, NavLink } from \"react-router-dom\";\n\nexport default function Layout({ children }) {\n  return (\n    <Flex direction=\"column\">\n      <Flex justify=\"space-between\" border=\"2px solid black\">\n        <UnorderedList styleType=\"none\">\n          <ListItem px=\"30px\" py=\"6px\" border=\"2px solid black\">\n            <Link as={NavLink} to=\"/\">\n              LOGO\n            </Link>\n          </ListItem>\n          <ListItem>My To Do App</ListItem>\n          <ListItem>\n            <Link as={NavLink} to=\"/barchart\">\n              Bar Chart\n            </Link>\n          </ListItem>\n          <ListItem>\n            <Link as={ReactLink} to=\"/piechart\">\n              Pie Chart\n            </Link>\n          </ListItem>\n        </UnorderedList>\n      </Flex>\n\n      {children}\n    </Flex>\n  );\n}\n","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\to-do-container\\ToDoContainer.js",[],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\add-task-form\\AddTaskForm.js",["72","73"],"import {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Select,\n  Text,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useForm } from \"../../hooks/use-form\";\n\nconst initialState = {\n  title: \"\",\n  severity: \"Normal\",\n  progress: \"to_do\",\n  date: new Date().toDateString(),\n  description: \"\",\n};\n\nexport default function AddTaskForm({\n  onSubmitt,\n  isSubmitting,\n  isSuccess,\n  currentState,\n  buttonName,\n}) {\n  const [todo, setTodo] = React.useState(currentState || initialState);\n\n  React.useEffect(() => {\n    isSuccess && setInitialState();\n  }, [isSuccess]);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    handleSubmit();\n  };\n\n  const onChange = (e) => {\n    handleChange(e);\n  };\n\n  const onBlur = (e) => {\n    handleBlur(e);\n  };\n\n  const titleValidation = (title) => {\n    if (title.trim() === \"\") {\n      return \"Title is required\";\n    }\n    if (title.trim().length < 6 || title.trim().length > 10) {\n      return \"Title needs to be between six to ten characters\";\n    }\n    return null;\n  };\n\n  const descriptionValidation = (description) => {\n    if (description.trim() === \"\") {\n      return \"Description is required\";\n    }\n    if (description.trim().length < 8) {\n      return \"Description needs to be at least eight characters\";\n    }\n    return null;\n  };\n\n  const validationScheme = {\n    title: titleValidation,\n    description: descriptionValidation,\n  };\n\n  const {\n    values,\n    errors,\n    touched,\n    handleSubmit,\n    handleBlur,\n    handleChange,\n    setInitialState\n  } = useForm(todo, validationScheme, onSubmitt);\n\n  return (\n    <form onSubmit={onSubmit} autoComplete=\"off\">\n      <FormControl>\n        <FormLabel pt=\"10px\">Name</FormLabel>\n        <Input\n          value={values.title}\n          bg=\"gray.50\"\n          name=\"title\"\n          onChange={onChange}\n          onBlur={onBlur}\n          // isRequired\n        />\n        <Text color=\"red.500\">{touched.title && errors.title}</Text>\n      </FormControl>\n      <FormControl>\n        <FormLabel pt=\"10px\">Description</FormLabel>\n        <Input\n          value={values.description}\n          bg=\"gray.50\"\n          name=\"description\"\n          onChange={onChange}\n          onBlur={onBlur}\n          // isRequired\n        />\n        <Text color=\"red.500\">{touched.description && errors.description}</Text>\n      </FormControl>\n      <FormControl>\n        <FormLabel pt=\"10px\">Severity</FormLabel>\n        <Select\n          value={values.severity}\n          bg=\"gray.50\"\n          name=\"severity\"\n          onChange={onChange}\n        >\n          <option>Normal</option>\n          <option>Important</option>\n          <option>Urgent</option>\n        </Select>\n      </FormControl>\n\n      <Button type=\"submit\" disabled={isSubmitting}>\n        {buttonName}\n      </Button>\n    </form>\n  );\n}\n","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\hooks\\useAsync.js",[],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\hooks\\use-form.js",[],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\to-do-card\\ToDoCard.js",[],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\add-task-form\\AddTaskFormik.js",["74"],"import {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Select,\n  Text,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\n\nconst initialState = {\n  title: \"\",\n  severity: \"Normal\",\n  progress: \"to_do\",\n  date: new Date().toDateString(),\n  description: \"\",\n};\n\nconst validationSchema = Yup.object().shape({\n  title: Yup.string()\n    .min(6, \"Too Short! Title needs to be between six to ten characters\")\n    .max(10, \"Too Long! Title needs to be between six to ten characters\")\n    .required(\"Title is required\"),\n  description: Yup.string()\n    .min(8, \"Too Short! Description needs to be at least eight characters\")\n    .max(50, \"Too Long!\")\n    .required(\"Description is required\"),\n});\n\nexport default function AddTaskFormik({\n  onSubmitt,\n  // isSubmitting,\n  isSuccess,\n  currentState,\n  buttonName,\n}) {\n  const [todo, setTodo] = React.useState(currentState || initialState);\n\n  return (\n    <Formik\n      initialValues={todo}\n      validationSchema={validationSchema}\n      onSubmit={(values, {resetForm, setSubmitting}) => {\n        onSubmitt(values);\n        setSubmitting(false);\n        resetForm();\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form autoComplete=\"off\">\n          <Field name=\"title\">\n            {({ field, form }) => (\n              <FormControl>\n                <FormLabel pt=\"10px\">Name</FormLabel>\n                <Input {...field} bg=\"gray.50\" name=\"title\" />\n                {form.errors.title && form.touched.title ? (\n                  <Text color=\"red.500\">{form.errors.title}</Text>\n                ) : null}\n              </FormControl>\n            )}\n          </Field>\n          <Field name=\"description\">\n            {({ field, form }) => (\n              <FormControl>\n                <FormLabel pt=\"10px\">Description</FormLabel>\n                <Input {...field} bg=\"gray.50\" name=\"description\" />\n                {form.errors.description && form.touched.description ? (\n                  <Text color=\"red.500\">{form.errors.description}</Text>\n                ) : null}\n              </FormControl>\n            )}\n          </Field>\n          <Field name=\"severity\">\n            {({ field, form }) => (\n              <FormControl>\n                <FormLabel pt=\"10px\">Severity</FormLabel>\n                <Select {...field} bg=\"gray.50\" name=\"severity\">\n                  <option>Normal</option>\n                  <option>Important</option>\n                  <option>Urgent</option>\n                </Select>\n              </FormControl>\n            )}\n          </Field>\n\n          <Button type=\"submit\" disabled={isSubmitting}>\n            {buttonName}\n          </Button>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\charts\\BarChart.js",["75","76"],"import React from \"react\";\r\nimport { ResponsiveBar } from \"@nivo/bar\";\r\nimport { Flex, Text } from \"@chakra-ui/react\";\r\nimport { TodoContext } from \"../../App\";\r\nimport { useTodos } from \"../todos-context\";\r\n\r\nexport default function BarChart() {\r\n  // const {data} = React.useContext(TodoContext);\r\n  const {data} = useTodos();\r\n\r\n  const unique = [...new Set(data.map((item) => item.date))];\r\n  const barChartData = [];\r\n\r\n  unique.map((date) => {\r\n    const values = {\r\n      date,\r\n      to_do: 0,\r\n      in_progress: 0,\r\n      done: 0,\r\n    };\r\n    data.filter((data) => {\r\n      data.date === date && values[data.progress]++;\r\n    });\r\n    barChartData.push(values);\r\n  });\r\n\r\n  return (\r\n    <Flex\r\n      direction=\"column\"\r\n      justify=\"space-between\"\r\n      align=\"center\"\r\n      p={6}\r\n      h=\"500px\"\r\n    >\r\n      <Text fontWeight=\"bold\" fontSize={20}>\r\n        Bar Chart\r\n      </Text>\r\n      <ResponsiveBar\r\n        data={barChartData}\r\n        keys={[\"to_do\", \"in_progress\", \"done\"]}\r\n        indexBy=\"date\"\r\n        margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\r\n        padding={0.3}\r\n        groupMode=\"grouped\"\r\n        valueScale={{ type: \"linear\" }}\r\n        indexScale={{ type: \"band\", round: true }}\r\n        colors={{ scheme: \"nivo\" }}\r\n        defs={[\r\n          {\r\n            id: \"dots\",\r\n            type: \"patternDots\",\r\n            background: \"inherit\",\r\n            color: \"rgba(255, 255, 255, 0.3)\",\r\n            size: 4,\r\n            padding: 1,\r\n            stagger: true,\r\n          },\r\n          {\r\n            id: \"lines\",\r\n            type: \"patternLines\",\r\n            background: \"inherit\",\r\n            color: \"#eed312\",\r\n            rotation: -45,\r\n            lineWidth: 6,\r\n            spacing: 10,\r\n          },\r\n        ]}\r\n        fill={[\r\n          {\r\n            match: {\r\n              id: \"in_progress\",\r\n            },\r\n            id: \"dots\",\r\n          },\r\n          {\r\n            match: {\r\n              id: \"done\",\r\n            },\r\n            id: \"lines\",\r\n          },\r\n        ]}\r\n        borderColor={{ from: \"color\", modifiers: [[\"darker\", 1.6]] }}\r\n        axisTop={null}\r\n        axisRight={null}\r\n        axisBottom={{\r\n          tickSize: 5,\r\n          tickPadding: 5,\r\n          tickRotation: 0,\r\n          legend: \"date\",\r\n          legendPosition: \"middle\",\r\n          legendOffset: 32,\r\n        }}\r\n        axisLeft={{\r\n          tickSize: 5,\r\n          tickPadding: 5,\r\n          tickRotation: 0,\r\n          legend: \"progress\",\r\n          legendPosition: \"middle\",\r\n          legendOffset: -40,\r\n        }}\r\n        labelSkipWidth={12}\r\n        labelSkipHeight={12}\r\n        labelTextColor={{ from: \"color\", modifiers: [[\"darker\", 1.6]] }}\r\n        legends={[\r\n          {\r\n            dataFrom: \"keys\",\r\n            anchor: \"bottom-right\",\r\n            direction: \"column\",\r\n            justify: false,\r\n            translateX: 120,\r\n            translateY: 0,\r\n            itemsSpacing: 2,\r\n            itemWidth: 100,\r\n            itemHeight: 20,\r\n            itemDirection: \"left-to-right\",\r\n            itemOpacity: 0.85,\r\n            symbolSize: 20,\r\n            effects: [\r\n              {\r\n                on: \"hover\",\r\n                style: {\r\n                  itemOpacity: 1,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        ]}\r\n        animate={true}\r\n        motionStiffness={90}\r\n        motionDamping={15}\r\n      />\r\n    </Flex>\r\n  );\r\n}\r\n","C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\components\\charts\\PieChart.js",[],"C:\\Users\\user\\Desktop\\to-do\\to-do-app\\to-do-task\\src\\hooks\\todos-context.js",["77","78"],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":8,"column":10,"nodeType":"85","messageId":"86","endLine":8,"endColumn":18},{"ruleId":"83","severity":1,"message":"87","line":15,"column":8,"nodeType":"85","messageId":"86","endLine":15,"endColumn":19},{"ruleId":"83","severity":1,"message":"88","line":18,"column":10,"nodeType":"85","messageId":"86","endLine":18,"endColumn":24},{"ruleId":"83","severity":1,"message":"89","line":22,"column":10,"nodeType":"85","messageId":"86","endLine":22,"endColumn":21},{"ruleId":"83","severity":1,"message":"90","line":44,"column":12,"nodeType":"85","messageId":"86","endLine":44,"endColumn":25},{"ruleId":"83","severity":1,"message":"91","line":70,"column":12,"nodeType":"85","messageId":"86","endLine":70,"endColumn":23},{"ruleId":"83","severity":1,"message":"92","line":1,"column":47,"nodeType":"85","messageId":"86","endLine":1,"endColumn":53},{"ruleId":"83","severity":1,"message":"93","line":27,"column":16,"nodeType":"85","messageId":"86","endLine":27,"endColumn":23},{"ruleId":"94","severity":1,"message":"95","line":31,"column":6,"nodeType":"96","endLine":31,"endColumn":17,"suggestions":"97"},{"ruleId":"83","severity":1,"message":"93","line":39,"column":16,"nodeType":"85","messageId":"86","endLine":39,"endColumn":23},{"ruleId":"98","severity":1,"message":"99","line":12,"column":21,"nodeType":"100","messageId":"101","endLine":12,"endColumn":23},{"ruleId":"98","severity":1,"message":"102","line":19,"column":24,"nodeType":"100","messageId":"101","endLine":19,"endColumn":26},{"ruleId":"83","severity":1,"message":"103","line":8,"column":32,"nodeType":"85","messageId":"86","endLine":8,"endColumn":42},{"ruleId":"83","severity":1,"message":"104","line":8,"column":44,"nodeType":"85","messageId":"86","endLine":8,"endColumn":51},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-unused-vars","'useQuery' is defined but never used.","Identifier","unusedVar","'AddTaskForm' is defined but never used.","'useBetterAsync' is defined but never used.","'TodoContext' is defined but never used.","'mutationError' is assigned a value but never used.","'updateError' is assigned a value but never used.","'Button' is defined but never used.","'setTodo' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'setInitialState'. Either include it or remove the dependency array.","ArrayExpression",["107"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.filter() expects a return value from arrow function.","'isFetching' is assigned a value but never used.","'refetch' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},"Update the dependencies array to be: [isSuccess, setInitialState]",{"range":"110","text":"111"},[569,580],"[isSuccess, setInitialState]"]